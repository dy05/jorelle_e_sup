version: "3.0"

services:

    # Client
    client:
        container_name: client
        links:
            - api
        restart: always
        env_file:
            - ./frontend/.env
        build:
            context: ./frontend
            dockerfile: ./Dockerfile
        volumes:
            - ./frontend/src:/opt/src
        command: ["npm", "start"]
        networks:
            - my_express_app_network
        ports:
            - 3000:3000

    mongo:
        container_name: mongo
        image: 'mongo:latest'
        restart: always
        env_file:
            - ./backend/.env
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
            MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
            MONGO_USER: ${MONGO_USER}
            MONGO_PASSWORD: ${MONGO_PASSWORD}
        ports:
            - ${ME_CONFIG_MONGODB_PORT}:${ME_CONFIG_MONGODB_PORT}
        volumes:
            - ./docker-data/mongo:/data/db
            - ./conf/mongodb/scripts/:/docker-entrypoint-initdb.d/

        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongo mongo:${ME_CONFIG_MONGODB_PORT}/test --quiet
            interval: 30s
            timeout: 10s
            retries: 3
        networks:
            - my_express_app_network

    mongo-express:
        image: 'mongo-express:latest'
        container_name: mongo-express
        depends_on:
            - mongo
        links:
            - mongo
        restart: always
        ports:
            - 8081:8081
        env_file:
            - ./backend/.env
        environment:
            ME_CONFIG_MONGODB_AUTH_USERNAME: ${ME_CONFIG_MONGODB_AUTH_USERNAME}
            ME_CONFIG_MONGODB_AUTH_PASSWORD: ${ME_CONFIG_MONGODB_AUTH_PASSWORD}
            ME_CONFIG_MONGODB_AUTH_DATABASE: ${ME_CONFIG_MONGODB_AUTH_DATABASE}
            ME_CONFIG_MONGODB_ENABLE_ADMIN: ${ME_CONFIG_MONGODB_ENABLE_ADMIN}
            ME_CONFIG_MONGODB_URL: ${ME_CONFIG_MONGODB_URL}
            ME_CONFIG_MONGODB_PORT: ${ME_CONFIG_MONGODB_PORT}
            MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
            MONGO_USER: ${MONGO_USER}
            MONGO_PASSWORD: ${MONGO_PASSWORD}
            ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
            ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
            ME_CONFIG_BASICAUTH: ${ME_CONFIG_BASICAUTH}
        healthcheck:
            test:  wget --quiet --tries=3 --spider http://${ME_CONFIG_MONGODB_AUTH_USERNAME}:${ME_CONFIG_MONGODB_AUTH_PASSWORD}3@10.10.10.60:8081 || exit 1
            interval: 30s
            timeout: 10s
            retries: 3
        volumes:
            - ./docker-data/express:/data/db
        networks:
            - my_express_app_network

    # API
    api:
        container_name: api
        depends_on:
            - mongo
        links:
            - mongo
            - maildev
            - redis
        restart: always
        env_file:
            - ./backend/.env
        build:
            context: ./backend
            dockerfile: ./Dockerfile
        ports:
            - 3001:3001
        volumes:
            - ./backend/src:/opt/src
        command: ["npm", "run", "start"]
        networks:
            - my_express_app_network

    maildev:
        container_name: maildev
        image: maildev/maildev
        restart: always
        environment:
            - TZ=Europe/France
            - MAILDEV_WEB_PORT=1080
            - MAILDEV_SMTP_PORT=1025
        ports:
            - "1080:1080"
            - "1025:1025"
        logging:
            driver: "json-file"
            options:
                max-size: "1m"
        networks:
            - my_express_app_network

    redis:
        container_name: redis
        image: redis:alpine
        ports:
          - 6379:6379
        volumes:
            - ./redis_data/:/data/redis_data
        networks:
            - my_express_app_network
networks:
    my_express_app_network:
        driver: bridge
